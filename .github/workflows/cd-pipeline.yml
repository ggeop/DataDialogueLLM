name: CD Pipeline

on:
  pull_request:
    types: [closed]
    branches:
      - develop
      - main
  workflow_dispatch:  # For manual triggering

jobs:
  docker-hub-push:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set Docker tag
        run: |
          if [[ -z "${{ github.base_ref }}" ]]; then
            echo "TAG=dev" >> $GITHUB_ENV
          elif [[ "${{ github.base_ref }}" == "main" ]]; then
            echo "TAG=latest" >> $GITHUB_ENV
          elif [[ "${{ github.base_ref }}" == "develop" ]]; then
            echo "TAG=staging" >> $GITHUB_ENV
          else
            echo "TAG=dev" >> $GITHUB_ENV
          fi

      - name: Build and push Docker Compose services
        env:
          DOCKER_REGISTRY: ${{ vars.DOCKER_REGISTRY }}
        run: |
          docker-compose --profile production build
          docker-compose --profile production push

      - name: Clean up
        if: always()
        run: docker system prune -af

  github-release:
    needs: docker-hub-push
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.base_ref == 'main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate version
        id: version
        run: |
          if [[ -z "${{ github.base_ref }}" ]]; then
              # For non-main branches, use a development version
              short_sha=$(git rev-parse --short HEAD)
              echo "VERSION=dev-$short_sha" >> $GITHUB_OUTPUT
          elif [[ "${{ github.base_ref }}" == "main" ]]; then
            # Get the latest tag
            latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            # Increment the patch version
            new_tag=$(echo $latest_tag | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
            echo "VERSION=$new_tag" >> $GITHUB_OUTPUT
          else
            # For non-main branches, use a development version
            short_sha=$(git rev-parse --short HEAD)
            echo "VERSION=dev-$short_sha" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          release_name: Release ${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false
