name: Publish New Release

on:
  push:
    branches:
      - main
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  github-release:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      new_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}  # Personal Access Token with repo access

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 19
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          GIT_AUTHOR_NAME: 'github-actions[bot]'
          GIT_AUTHOR_EMAIL: 'github-actions[bot]@users.noreply.github.com'
          GIT_COMMITTER_NAME: 'github-actions[bot]'
          GIT_COMMITTER_EMAIL: 'github-actions[bot]@users.noreply.github.com'

      - name: Print Version Info
        run: |
          echo "New Release Version: ${{ steps.semantic.outputs.new_release_version }}"
          echo "New Release Notes: ${{ steps.semantic.outputs.new_release_notes }}"
          echo "New Release Published: ${{ steps.semantic.outputs.new_release_published }}"
          echo "Last Release Version: ${{ steps.semantic.outputs.last_release_version }}"

  docker-hub-push:
      needs: github-release
      runs-on: ubuntu-latest
      if: (github.ref == 'refs/heads/main' && needs.github-release.outputs.new_release_published == 'true')
      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Install Docker Compose
          run: |
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose --version

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v2

        - name: Login to Docker Registry
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}

        - name: Set Docker tag
          run: |
            if [[ -z "${{ github.base_ref }}" ]]; then
              echo "TAG=dev" >> $GITHUB_ENV
            elif [[ "${{ github.base_ref }}" == "main" ]]; then
              if [[ "${{ needs.github-release.outputs.new_release_published }}" == "true" ]]; then
                echo "TAG=${{ needs.github-release.outputs.new_version }}" >> $GITHUB_ENV
                echo "LATEST_TAG=latest" >> $GITHUB_ENV
              else
                echo "TAG=latest" >> $GITHUB_ENV
              fi
            elif [[ "${{ github.base_ref }}" == "develop" ]]; then
              echo "TAG=staging" >> $GITHUB_ENV
            else
              echo "TAG=dev" >> $GITHUB_ENV
            fi

        - name: Build and push Docker Compose services
          env:
            DOCKER_REGISTRY: ${{ vars.DOCKER_REGISTRY }}
            VERSION: ${{ needs.github-release.outputs.new_version }}
            TAG: ${{ env.TAG }}
          run: |
            # Build and push with appropriate profile
            docker-compose --profile production build
            docker-compose --profile production push
            
            # If this is a release, also tag as latest
            if [ "${{ needs.github-release.outputs.new_release_published }}" == "true" ]; then
              TAG=latest docker-compose --profile production build
              TAG=latest docker-compose --profile production push
            fi

        - name: Clean up
          if: always()
          run: docker system prune -af