services:
# ============================
# Data Services
# ============================
  try-demo-postgres-db:
    build: ./sample_data/postgres
    image: ${DOCKER_REGISTRY}/data-dialogue-try-demo-db:${TAG:-latest}
    environment:
      POSTGRES_DB: dvdrental
      POSTGRES_USER: demo
      POSTGRES_PASSWORD: 123456
    ports:
      - "5432:5432"
    volumes:
      - try_on_data:/var/lib/postgresql/data
    command: >
      bash -c "
        echo 'Starting PostgreSQL and initialization script...';
        docker-entrypoint.sh postgres &
        until pg_isready -U demo -d dvdrental; do
          echo 'Waiting for PostgreSQL to start...';
          sleep 2;
        done;
        echo 'PostgreSQL is ready. Running initialization script...';
        bash /docker-entrypoint-initdb.d/load-dvd-rental-db.sh;
        echo 'Initialization complete. Keeping container running...';
        wait
      "
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U demo -d dvdrental"]
      interval: 10s
      timeout: 5s
      retries: 5

  mysql-db:
    build: ./sample_data/mysql
    image: ${DOCKER_REGISTRY}/data-dialogue-mysql-sakila:${TAG:-latest}
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: sakila
      MYSQL_USER: demo
      MYSQL_PASSWORD: 123456
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "demo", "-p123456"]
      interval: 10s
      timeout: 5s
      retries: 5

# ============================
# Backend Services
# ============================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: ${DOCKER_REGISTRY}/data-dialogue-backend:${TAG:-latest}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - models:/data/models
      # Map host's home directory or specific data directories
      - ${HOME}/data:/app/data
      # Temporary upload directory
      - /tmp/uploads:/tmp/uploads

# ============================
# Frontend Services
# ============================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: ${DOCKER_REGISTRY}/data-dialogue-frontend:${TAG:-latest}
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
    ports:
      - "5000:5000"
    volumes:
      - ./frontend:/app

# ============================
# Other
# ============================
volumes:
  try_on_data:
  mysql_data:
  models:

networks:
  default:
    name: data-dialogue-network
    driver: bridge