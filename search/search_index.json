{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Data Dialogue","text":""},{"location":"#elevate-your-data-insights","title":"Elevate Your Data Insights","text":""},{"location":"#welcome-to-data-dialogue","title":"\ud83c\udf89 Welcome to Data Dialogue","text":"<p>Transform the way you interact with data using AI-powered conversations</p> <p>DataDialogue is an innovative application that bridges the gap between your data and natural language understanding. By leveraging advanced AI capabilities, it enables intuitive data exploration and analysis through conversational interfaces.</p> <p>A user can select a LLM model and connect it with a data source and do his analysis by writing simple prompts instead of writing SQL queries or code.</p> <p> </p>"},{"location":"#key-features","title":"\u2728 Key Features","text":"<ul> <li>Natural Language Querying: Interact with your data using simple prompts instead of SQL</li> <li>Multiple LLM Integration:</li> <li>HuggingFace models</li> <li>Commercial models (Google LLMs)</li> <li>Flexible Architecture: Extend to different data sources easily</li> <li>RESTful API: Easy integration with other systems</li> <li>Secure Query Execution: Protection against harmful SQL commands</li> <li>Query Validation: Create and validate queries with copy option</li> <li>Results Visualization: Interactive data visualization</li> <li>Multiple Data Source Support: Connect to various data sources</li> </ul> Supported Providers ProviderStatus Google\u2714\ufe0f HF\u2714\ufe0f OpenAI\u2714\ufe0f Anthropic\u2714\ufe0f Supported Data Sources SourceStatus PostgreSQL\u2714\ufe0f MySQL\u2714\ufe0f Databricks\u2714\ufe0f Mongo DB\u2714\ufe0f CSV\u2714\ufe0f"},{"location":"#getting-started","title":"\ud83c\udfaf Getting Started","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker</li> <li>Docker Compose</li> </ul>"},{"location":"#quick-installation","title":"Quick Installation","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/ggeop/data-dialogue.git\ncd data-dialogue\n</code></pre></p> </li> <li> <p>Run Data Dialogue services:    <pre><code>docker-compose --env-file .env.prod up\n</code></pre></p> </li> <li> <p>Access the frontend at <code>http://localhost:5000</code> in your web browser.</p> </li> </ol> <p>Pro Tip: Get your FREE Google Gemini API key for the best cloud-based experience!</p>"},{"location":"#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Installation Guide - Detailed setup instructions</li> <li>Quick Start Guide - Get up and running quickly</li> <li>Contributing - How to contribute</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>Your feedback and contributions make DataDialogue better! If you have: - \ud83d\udcad Feature suggestions - \ud83d\udc1e Bug reports - \ud83d\udca1 General feedback</p> <p>Please read our Contributing Guidelines before submitting any pull requests.</p>"},{"location":"#support-and-community","title":"\u2665\ufe0f Support and Community","text":"<ul> <li>Report issues via GitHub Issues</li> <li>Join our community discussions here</li> </ul>"},{"location":"#license","title":"\ud83d\udcce License","text":"<p>Distributed under the MIT License. See License for more information. </p>"},{"location":"license/","title":"License","text":"<p>DataDialogue is distributed under the MIT License. The full text of the license is available in the root of the repository at LICENSE.</p>"},{"location":"license/#mit-license","title":"MIT License","text":"<p>Copyright (c) 2025 Georgios Papachristou</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. </p>"},{"location":"community/CONTRIBUTING/","title":"Contributing to Data Dialogue","text":"<p>First off, thank you for considering contributing to Data Dialogue! \ud83c\udf89 As an AI-powered data interaction tool, we're excited to have your input in making our project even better.</p>"},{"location":"community/CONTRIBUTING/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Project Structure</li> <li>Code of Conduct</li> <li>Development Process</li> <li>Branching Strategy</li> <li>Commit Convention</li> <li>Pull Request Process</li> <li>Development Setup</li> <li>Release Process</li> </ul>"},{"location":"community/CONTRIBUTING/#project-structure","title":"Project Structure","text":"<pre><code>data-dialogue/\n\u251c\u2500\u2500 backend/\n\u2502   \u251c\u2500\u2500 app/\n\u2502   \u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u251c\u2500\u2500 core/\n\u2502   \u2502   \u251c\u2500\u2500 services/\n\u2502   \u2502   \u2514\u2500\u2500 main.py\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u2514\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 frontend/\n\u2502   \u251c\u2500\u2500 static/\n\u2502   \u2502   \u251c\u2500\u2500 css/\n\u2502   \u2502   \u251c\u2500\u2500 images/\n\u2502   \u2502   \u251c\u2500\u2500 js/\n\u2502   \u2502   \u2514\u2500\u2500 templates/\n\u2502   \u251c\u2500\u2500 app.py\n\u2502   \u2514\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 scripts/\n\u2502   \u2514\u2500\u2500 black/\n\u2502       \u251c\u2500\u2500 setup_linux.sh\n\u2502       \u2514\u2500\u2500 setup_windows.bat\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 .gitignore\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"community/CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>Our project is committed to providing a welcoming and inspiring community for all. We expect all participants to: - Be respectful and inclusive - Be collaborative - Focus on what is best for the community - Show empathy towards other community members</p>"},{"location":"community/CONTRIBUTING/#development-process","title":"Development Process","text":"<ol> <li>Fork the repository</li> <li>Create your feature branch from <code>develop</code></li> <li>Write your code and tests</li> <li>Follow our commit message convention</li> <li>Push to your fork</li> <li>Submit a pull request</li> </ol>"},{"location":"community/CONTRIBUTING/#branching-strategy","title":"Branching Strategy","text":"<p>We use the following branches: - <code>main</code>: Production-ready code - <code>develop</code>: Integration branch for features - <code>feature/*</code>: New features - <code>fix/*</code>: Bug fixes - <code>hotfix/*</code>: Emergency fixes for production</p>"},{"location":"community/CONTRIBUTING/#commit-convention","title":"Commit Convention","text":"<p>We use Conventional Commits to automate versioning and release notes.</p>"},{"location":"community/CONTRIBUTING/#format","title":"Format","text":"<pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;description&gt;\n\n[optional body]\n\n[optional footer]\n</code></pre>"},{"location":"community/CONTRIBUTING/#types","title":"Types","text":"<ul> <li><code>feat</code>: New feature (MINOR version bump)</li> <li><code>fix</code>: Bug fix (PATCH version bump)</li> <li><code>docs</code>: Documentation changes</li> <li><code>style</code>: Code style changes</li> <li><code>refactor</code>: Code restructuring</li> <li><code>perf</code>: Performance improvements</li> <li><code>test</code>: Adding/updating tests</li> <li><code>chore</code>: Maintenance tasks</li> </ul>"},{"location":"community/CONTRIBUTING/#examples","title":"Examples","text":"<pre><code># Add new LLM feature\nfeat(backend): add support for new LLM model\n\n# Fix database connection\nfix(database): resolve PostgreSQL timeout issue\n\n# Breaking API change\nfeat!: redesign query generation API\n\n# Update documentation\ndocs: update installation guide\n</code></pre>"},{"location":"community/CONTRIBUTING/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create a PR from your feature branch to <code>develop</code></li> <li>Ensure your PR title follows commit convention</li> <li>Update documentation if needed</li> <li>Get at least one code review</li> <li>All checks must pass before merging</li> </ol>"},{"location":"community/CONTRIBUTING/#additional-resources","title":"Additional Resources","text":"<ul> <li>Black Documentation</li> <li>Pre-commit Documentation</li> </ul>"},{"location":"community/CONTRIBUTING/#pr-title-convention","title":"PR Title Convention","text":"<p>Follow the same convention as commit messages: <pre><code>feat: add new language model integration\nfix: resolve memory leak in query processor\ndocs: update deployment guide\n</code></pre></p>"},{"location":"community/CONTRIBUTING/#development-setup","title":"Development Setup","text":"<p>Follow the instructions Development Setup</p>"},{"location":"development/ADD_MODEL_PROVIDER/","title":"How to add a new model provider","text":"<p>NOTE: Adding new provider needs few changes in different places. In the future providers configuration can be centralized or even provided from external API</p> <ol> <li> <p>Add a new model <code>loader.py</code> and <code>wrapper.py</code> under the <code>backend/app/services/models/models</code></p> <ul> <li>Create a folder with the provider name e.g <code>openai</code></li> <li>Implement the loader and the wrapper based on the interfaces <code>ModelLoader</code> and <code>LLMInterface</code> <pre><code>class NewProviderLoader(ModelLoader):\n    def __init__(self, api_key: str):\n        self.client = OpenAI(api_key=api_key)\n\n    def load_model(...):\n\n        return NewProviderWrapper(...)\n\nclass NewProviderWrapper(LLMInterface):\n    ...\n\n    def complete(...):\n        ...\n\n    def embed(...):\n        ...\n</code></pre></li> <li>Add the new model provider enum in <code>ModelProvider</code> under the <code>backend/app/services/models/models/config.py</code></li> </ul> </li> </ol> <pre><code>class ModelProvider(str, Enum):\n    GOOGLE = \"google\"\n    OPENAI = \"openai\"\n    ANTHROPIC = \"anthropic\"\n    HUGGINGFACE = \"huggingface\"\n    ...\n</code></pre> <ol> <li>Utilize the model in the agent_manager service under the <code>backend/app/services/agents/agent_manager.py</code></li> <li>Add the provider logo under the <code>frontend/static/images/logos</code></li> <li>Add the new provider under the supported models API under the <code>backend/app/api/v1/endpoints/models.py</code></li> </ol>"},{"location":"development/COMMON_ISSUES/","title":"Common Issues","text":""},{"location":"development/COMMON_ISSUES/#black-setup-troubleshooting","title":"Black Setup Troubleshooting","text":"<ol> <li>If you encounter permission issues:</li> <li>Windows: Run Command Prompt as administrator</li> <li> <p>Linux: Use <code>sudo</code> for permissions</p> </li> <li> <p>Virtual Environment Issues:</p> </li> <li>Ensure Python is in your system PATH</li> <li>Try creating the virtual environment manually if the script fails</li> </ol>"},{"location":"development/COMMON_ISSUES/#development-environment-issues","title":"Development Environment Issues","text":"<ol> <li>Port Conflicts:</li> <li>Check if ports 8000 (backend) or 5000 (frontend) are already in use</li> <li> <p>Modify the port numbers in your configuration if needed</p> </li> <li> <p>Database Connectivity:</p> </li> <li>Ensure the demo database is running if using local development</li> <li>Check database credentials in your <code>.env</code> file</li> </ol>"},{"location":"development/DEV_SETUP/","title":"Local Development Setup Guide","text":""},{"location":"development/DEV_SETUP/#prerequisites","title":"Prerequisites","text":"<ul> <li>Git</li> <li>Docker and Docker Compose (optional, for container development)</li> </ul>"},{"location":"development/DEV_SETUP/#setup","title":"Setup","text":"<p>For local development we need to setup few packages in our local machine. The installation is handled by one script.</p>"},{"location":"development/DEV_SETUP/#windows-setup","title":"Windows Setup","text":"<ol> <li>Open Command Prompt as administrator</li> <li>Navigate to your project directory:    <pre><code>cd path\\to\\data-dialogue\n</code></pre></li> <li>Run the setup script:    <pre><code>scripts\\setup_windows.bat\n</code></pre></li> </ol>"},{"location":"development/DEV_SETUP/#linux-setup","title":"Linux Setup","text":"<ol> <li>Open terminal</li> <li>Navigate to your project directory:    <pre><code>cd path/to/data-dialogue\n</code></pre></li> <li> <p>Make the script executable:    <pre><code>chmod +x scripts/setup_linux.sh\n</code></pre></p> </li> <li> <p>Run the setup script:</p> </li> </ol> <p>If you are using linux subsystem (e.g wsl) Run this command first: <pre><code>sudo apt-get install dos2unix  # Install if not present\ndos2unix scripts/setup_linux.sh\n</code></pre></p> <pre><code>./scripts/setup_linux.sh\n</code></pre>"},{"location":"development/DEV_SETUP/#running-services-locally","title":"Running Services Locally","text":""},{"location":"development/DEV_SETUP/#using-docker-compose-recommended-for-full-stack","title":"Using Docker Compose (Recommended for full stack):","text":"<pre><code>docker-compose up --build\n</code></pre>"},{"location":"documentation/setup/","title":"Documentation Setup Guide","text":"<p>This guide will help you set up the local development environment for building and testing the DataDialogue documentation.</p>"},{"location":"documentation/setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>pip (Python package installer)</li> <li>Git</li> </ul>"},{"location":"documentation/setup/#installation","title":"Installation","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/ggeop/DataDialogueLLM.git\ncd DataDialogueLLM\n</code></pre></p> </li> <li> <p>Create a virtual environment (recommended):    <pre><code># On Windows\npython -m venv venv\n.\\venv\\Scripts\\activate\n\n# On Unix or MacOS\npython3 -m venv venv\nsource venv/bin/activate\n</code></pre></p> </li> <li> <p>Install documentation dependencies:    <pre><code>pip install -r docs/documentation/requirements.py\n</code></pre></p> </li> </ol>"},{"location":"documentation/setup/#building-documentation","title":"Building Documentation","text":"<ol> <li> <p>Navigate to the project root:    <pre><code>cd DataDialogueLLM\n</code></pre></p> </li> <li> <p>Build the documentation:    <pre><code>mkdocs build\n</code></pre></p> </li> <li> <p>Serve the documentation locally:    <pre><code>mkdocs serve\n</code></pre></p> </li> <li> <p>Access the documentation at <code>http://127.0.0.1:8000</code></p> </li> </ol>"},{"location":"documentation/setup/#testing-documentation","title":"Testing Documentation","text":"<ol> <li>Live Preview</li> <li>Run <code>mkdocs serve</code></li> <li>Open <code>http://127.0.0.1:8000</code> in your browser</li> <li> <p>Changes will automatically reload</p> </li> <li> <p>Build Testing</p> </li> <li>Run <code>mkdocs build</code></li> <li>Check the <code>site</code> directory for the built documentation</li> <li> <p>Verify all pages render correctly</p> </li> <li> <p>Link Checking</p> </li> <li>Install link checking tool:      <pre><code>pip install linkchecker\n</code></pre></li> <li>Run link checker:      <pre><code>linkchecker http://127.0.0.1:8000\n</code></pre></li> </ol>"},{"location":"documentation/setup/#common-issues","title":"Common Issues","text":"<ol> <li>Missing Dependencies</li> <li> <p>Solution: Run <code>pip install -r docs/documentation/requirements.py</code></p> </li> <li> <p>Build Errors</p> </li> <li>Check for syntax errors in markdown files</li> <li>Verify all referenced files exist</li> <li> <p>Check mkdocs.yml configuration</p> </li> <li> <p>Theme Issues</p> </li> <li>Clear browser cache</li> <li>Restart mkdocs serve</li> <li>Verify theme configuration in mkdocs.yml</li> </ol>"},{"location":"documentation/setup/#best-practices","title":"Best Practices","text":"<ol> <li>Writing Documentation</li> <li>Use clear, concise language</li> <li>Follow the established structure</li> <li>Include code examples where relevant</li> <li> <p>Add screenshots for UI-related content</p> </li> <li> <p>Version Control</p> </li> <li>Create a new branch for documentation changes</li> <li>Use descriptive commit messages</li> <li> <p>Test changes locally before pushing</p> </li> <li> <p>Maintenance</p> </li> <li>Keep dependencies up to date</li> <li>Regularly check for broken links</li> <li>Update screenshots when UI changes</li> </ol>"},{"location":"documentation/setup/#additional-resources","title":"Additional Resources","text":"<ul> <li>MkDocs Documentation</li> <li>Material for MkDocs</li> <li>Markdown Guide </li> </ul>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide will help you get DataDialogue up and running on your system.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing DataDialogue, make sure you have the following prerequisites installed:</p> <ul> <li>Docker (version 20.10.0 or higher)</li> <li>Docker Compose (version 2.0.0 or higher)</li> <li>Git</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#method-1-using-docker-recommended","title":"Method 1: Using Docker (Recommended)","text":"<p>The easiest way to get started with DataDialogue is using Docker:</p> <pre><code># Clone the repository\ngit clone https://github.com/yourusername/DataDialogue\n\n# Navigate to the project directory\ncd DataDialogue\n\n# Start the application\ndocker-compose up\n</code></pre> <p>The application will be available at <code>http://localhost:3000</code>.</p>"},{"location":"getting-started/installation/#method-2-manual-installation","title":"Method 2: Manual Installation","text":"<p>If you prefer to run the application without Docker, follow these steps:</p>"},{"location":"getting-started/installation/#backend-setup","title":"Backend Setup","text":"<pre><code># Navigate to the backend directory\ncd backend\n\n# Create a virtual environment\npython -m venv venv\n\n# Activate the virtual environment\n# On Windows:\n.\\venv\\Scripts\\activate\n# On Unix or MacOS:\nsource venv/bin/activate\n\n# Install dependencies\npip install -r requirements.txt\n\n# Start the backend server\npython main.py\n</code></pre>"},{"location":"getting-started/installation/#frontend-setup","title":"Frontend Setup","text":"<pre><code># Navigate to the frontend directory\ncd frontend\n\n# Install dependencies\nnpm install\n\n# Start the development server\nnpm run dev\n</code></pre>"},{"location":"getting-started/installation/#configuration","title":"Configuration","text":"<p>After installation, you might want to configure:</p> <ol> <li>Environment variables (copy <code>.env.example</code> to <code>.env</code>)</li> <li>Database settings</li> <li>API endpoints</li> </ol>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify that DataDialogue is running correctly:</p> <ol> <li>Open your browser and navigate to <code>http://localhost:3000</code></li> <li>You should see the DataDialogue landing page</li> <li>Try uploading a sample dataset to test the functionality</li> </ol>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues during installation:</p> <ol> <li>Check if all prerequisites are installed correctly</li> <li>Ensure all ports (3000 for frontend, 8000 for backend) are available</li> <li>Check the logs using <code>docker-compose logs</code></li> <li>Refer to our GitHub Issues page</li> </ol>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Follow our Quick Start Guide to begin using DataDialogue</li> <li>Join our community and contribute to the project </li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>This guide will help you get up and running with DataDialogue in minutes.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker</li> <li>Docker Compose</li> </ul>"},{"location":"getting-started/quick-start/#quick-installation","title":"Quick Installation","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/ggeop/data-dialogue.git\ncd data-dialogue\n</code></pre></p> </li> <li> <p>Start the services:    <pre><code>docker-compose --env-file .env.prod up\n</code></pre></p> </li> <li> <p>Access the application at <code>http://localhost:5000</code></p> </li> </ol>"},{"location":"getting-started/quick-start/#first-steps","title":"First Steps","text":"<ol> <li>Choose Your Model</li> <li>Select a model provider (Google, OpenAI, Anthropic, or HuggingFace)</li> <li>For cloud models, you'll need to provide your API key</li> <li> <p>For local models (HuggingFace), ensure you have sufficient computing power</p> </li> <li> <p>Connect Your Data Source</p> </li> <li>Select from supported data sources:<ul> <li>PostgreSQL</li> <li>MySQL</li> <li>Databricks</li> <li>MongoDB</li> <li>CSV files</li> </ul> </li> <li> <p>Provide your connection details</p> </li> <li> <p>Start Querying</p> </li> <li>Write natural language queries instead of SQL</li> <li>Get instant results and visualizations</li> <li>Copy validated queries for reuse</li> </ol>"},{"location":"getting-started/quick-start/#example-workflow","title":"Example Workflow","text":"<ol> <li>Select Model: Choose Google Gemini (recommended for beginners)</li> <li>Connect Data: Link your PostgreSQL database</li> <li>Write Query: \"Show me the top 10 customers by total purchases\"</li> <li>View Results: See the data in a table or chart format</li> <li>Copy Query: Save the generated SQL for future use</li> </ol>"},{"location":"getting-started/quick-start/#tips-for-success","title":"Tips for Success","text":"<ul> <li>Start with simple queries to test the system</li> <li>Use the \"Copy Query\" feature to learn how your questions are translated to SQL</li> <li>Try different visualization options for your results</li> <li>Check the Common Issues guide if you encounter problems</li> </ul>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about local development</li> <li>Join our community discussions </li> </ul>"},{"location":"release-management/RELEASE/","title":"Release Process","text":"<p>Releases are automated using semantic-release based on conventional commits.</p>"},{"location":"release-management/RELEASE/#version-calculation","title":"Version Calculation","text":"<ul> <li>Breaking Change \u2192 MAJOR version bump</li> <li>New Feature \u2192 MINOR version bump</li> <li>Bug Fix \u2192 PATCH version bump</li> </ul>"},{"location":"release-management/RELEASE/#release-flow","title":"Release Flow","text":"<ol> <li>Changes are merged to <code>develop</code></li> <li>PR from <code>develop</code> to <code>main</code> creates release</li> <li>Automated process:</li> <li>Calculates version</li> <li>Generates changelog</li> <li>Creates GitHub release</li> <li>Pushes Docker images</li> </ol>"},{"location":"release-management/RELEASE_STRATEGY/","title":"Release Strategy","text":""},{"location":"release-management/RELEASE_STRATEGY/#overview","title":"Overview","text":"<p>This document describes the release process for our project. We use semantic versioning with automated releases based on conventional commits.</p>"},{"location":"release-management/RELEASE_STRATEGY/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Version Numbering</li> <li>Branch Strategy</li> <li>Release Process</li> <li>Commit Convention</li> <li>Automated Releases</li> </ol>"},{"location":"release-management/RELEASE_STRATEGY/#version-numbering","title":"Version Numbering","text":"<p>We use semantic versioning (MAJOR.MINOR.PATCH) automatically calculated from commit messages:</p> <ul> <li>MAJOR version for breaking changes</li> <li>MINOR version for new features</li> <li>PATCH version for bug fixes</li> </ul>"},{"location":"release-management/RELEASE_STRATEGY/#branch-strategy","title":"Branch Strategy","text":"<ul> <li><code>main</code> - Production code</li> <li><code>develop</code> - Integration branch</li> <li><code>feature/*</code> - New features</li> <li><code>fix/*</code> - Bug fixes</li> <li><code>hotfix/*</code> - Emergency fixes</li> </ul>"},{"location":"release-management/RELEASE_STRATEGY/#release-process","title":"Release Process","text":"<p>Releases are automated using semantic-release and triggered by merging to main:</p> <ol> <li>Write commits following conventional commit format</li> <li>Create PR to develop</li> <li>Merge develop to main when ready to release</li> <li>Automated process:</li> <li>Calculates version</li> <li>Creates changelog</li> <li>Creates GitHub release</li> <li>Tags Docker images</li> </ol>"},{"location":"release-management/RELEASE_STRATEGY/#commit-convention","title":"Commit Convention","text":"<p>Format: <code>&lt;type&gt;(&lt;scope&gt;): &lt;description&gt;</code></p> <p>Types: - <code>feat</code>: New feature (MINOR version) - <code>fix</code>: Bug fix (PATCH version) - <code>feat!</code> or <code>BREAKING CHANGE</code>: Breaking change (MAJOR version) - <code>docs</code>: Documentation only - <code>style</code>: Code style changes - <code>refactor</code>: Code refactoring - <code>perf</code>: Performance improvements - <code>test</code>: Adding/updating tests - <code>chore</code>: Maintenance tasks</p> <p>Examples: <pre><code>feat: add new user authentication endpoint\nfix: resolve memory leak in worker process\nfeat!: redesign API response format\n</code></pre></p>"},{"location":"release-management/RELEASE_STRATEGY/#automated-releases","title":"Automated Releases","text":"<p>Releases are handled by GitHub Actions workflow:</p> <pre><code>name: Release Workflow\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  github-release: ...\n  docker-release: ...\n</code></pre> <p>For more details, see: - Contributing Guidelines</p>"}]}